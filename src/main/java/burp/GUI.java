package burp;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class GUI implements IMessageEditorController {
    private JPanel rootPanel;
    public static HttpLogTable logTable;
    private JSplitPane splitPanel;
    private JButton clearAllButton;
    private JButton clearOtherButton;
    private JPanel buttonPanel;
    public static IMessageEditor requestViewer;
    public static IMessageEditor responseViewer;
    public static IHttpRequestResponse currentlyDisplayedItem;

    public IModule iModule;

    public GUI() {
        $$$setupUI$$$();
        clearAllButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int n = JOptionPane.showConfirmDialog(null, "Are you sure you want to clear the data?", "Struts2Burp Client Prompt", JOptionPane.YES_NO_OPTION);
                if (n == 0) {
                    BurpExtender.log.clear();
                    logTable.getHttpLogTableModel().fireTableDataChanged();
                    logTable.updateUI();
                    requestViewer.setMessage("".getBytes(), false);
                    responseViewer.setMessage("".getBytes(), false);
                }
            }
        });

        clearOtherButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                BurpExtender.log.removeIf(logEntry -> logEntry.vulClass == null);
            }
        });

        logTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON3) {
                    int row = logTable.getSelectedRow();
                    logTable.setRowSelectionInterval(row, row);
                    LogEntry logEntry = BurpExtender.log.get(row);

                    JPopupMenu jPopupMenu = new JPopupMenu();

                    if (logEntry.vulClass != null) {
                        JMenuItem exp_in_repeater = new JMenuItem("exp in Repeater");
                        exp_in_repeater.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent e) {
                                byte[] exploit = logEntry.vulClass.makeExploit();
                                IHttpService httpService = logEntry.requestResponse.getHttpService();
                                String protocol = httpService.getProtocol();
                                BurpExtender.callbacks.sendToRepeater(httpService.getHost(), httpService.getPort(), protocol.startsWith("https://"), exploit, null);
                            }
                        });
                        jPopupMenu.add(exp_in_repeater);
                    }

                    jPopupMenu.show(logTable, e.getX(), e.getY());
                }
            }
        });

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(2, 1, new Insets(5, 5, 5, 5), -1, -1));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(buttonPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, true));
        clearOtherButton = new JButton();
        clearOtherButton.setText("Clear Other");
        buttonPanel.add(clearOtherButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clearAllButton = new JButton();
        clearAllButton.setText("Clear All");
        buttonPanel.add(clearAllButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        splitPanel.setOrientation(0);
        rootPanel.add(splitPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private void createUIComponents() {
        splitPanel = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
        splitPanel.setDividerLocation(0.5);

        HttpLogTableModel model = new HttpLogTableModel();
        logTable = new HttpLogTable(model);

        JScrollPane scrollPane = new JScrollPane(logTable);
        splitPanel.setTopComponent(scrollPane);

        JTabbedPane tabs = new JTabbedPane();
        requestViewer = BurpExtender.callbacks.createMessageEditor(this, false);
        responseViewer = BurpExtender.callbacks.createMessageEditor(this, false);

        tabs.addTab("Request", requestViewer.getComponent());
        tabs.addTab("Response", responseViewer.getComponent());
        splitPanel.setBottomComponent(tabs);


        BurpExtender.callbacks.customizeUiComponent(logTable);
        BurpExtender.callbacks.customizeUiComponent(splitPanel);
        BurpExtender.callbacks.customizeUiComponent(scrollPane);
    }

    @Override
    public IHttpService getHttpService() {
        return currentlyDisplayedItem.getHttpService();
    }

    @Override
    public byte[] getRequest() {
        return currentlyDisplayedItem.getRequest();
    }

    @Override
    public byte[] getResponse() {
        return currentlyDisplayedItem.getResponse();
    }

}
